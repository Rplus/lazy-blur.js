{"version":3,"sources":["lazy-blur.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","LazyBlur","opt","undefined","this","imgSQuery","imgLClass","filterSelector","getImgLSrc","imgS","getAttribute","onLoad","parentElement","className","blurSize","scrollThreshold","eventType","imgs","slice","document","querySelectorAll","inlineSvg","body","appendChild","newEl","createElement","innerHTML","appendSrcImg","imgL","Image","onload","src","parentNode","insertBefore","nextSibling","map","img","addEventListener","getImgPos","imgsWithPos","_rect","getBoundingClientRect","_offsetY","window","pageYOffset","imgEl","top","bottom","detectImgsAreInViewport","_vpTop","_vpBottom","innerHeight","filter","imgData","idx","isInVp"],"mappings":";;;;;AAIA,YAIA,SAASA,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAFhH,GAAIC,UAAWC,OAAOC,QAAU,SAAUC,GAAU,IAAK,GAAIC,GAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAAE,GAAIG,GAASF,UAAUD,EAAI,KAAK,GAAII,KAAOD,GAAcN,OAAOQ,UAAUC,eAAeC,KAAKJ,EAAQC,KAAQL,EAAOK,GAAOD,EAAOC,IAAY,MAAOL,IALjPS,SAmCJ,QAnCIA,KA+CJ,GAZaC,GAAGR,UAAAC,QAAA,GAAAQ,SAAAT,UAAA,MAAKA,UAAA,EAYgD,IAErET,gBAAgBmB,KAjDZH,GAoCFC,EAAIG,UAAYH,EAAIG,WAAa,mBACjCH,EAAMb,UACJiB,UAAW,kBACXC,eAAc,2BAA6BL,EAAIG,UAC/CG,WAAY,SAACC,GAAW,MAAOA,GAAKC,aAAa,aACjDC,OAAQ,SAACF,GAAWA,EAAKG,cAAcC,WAAa,UACpDC,SAAU,GACVC,gBAAiB,GACjBC,UAAW,UACVd,GAEHA,EAAIe,QAAUC,MAAMlB,KAAKmB,SAASC,iBAAiBlB,EAAIG,YAGlDH,EAAIe,KAAKtB,OAHqD,CAKzC,kBAAfO,GAAIS,SACbT,EAAIS,QAAS,EACd,IAGGU,GAAS,oRAIyBnB,EAAIY,SAAQ,wFAK9CZ,EAAIK,eAAc,iIAMtBY,UAASG,KAAKC,YAAY,WACxB,GAAIC,GAAQL,SAASM,cAAc,MAEnC,OADAD,GAAME,UAAYL,EACXG,KAGT,IAAIG,GAAe,SAAClB,GAClB,GAAImB,GAAO,GAAIC,MACX3B,GAAIS,SACNiB,EAAKE,OAAS,WACZ5B,EAAIS,OAAOF,KAGfmB,EAAKf,UAAYX,EAAII,UACrBsB,EAAKG,IAAM7B,EAAIM,WAAWC,GAC1BA,EAAKuB,WAAWC,aAAaL,EAAMnB,EAAKyB,aACxC,QAGMhC,EAAIc,WACV,IAAK,QACL,IAAK,aACHd,EAAIe,KAAKkB,IAAI,SAAAC,GACXA,EAAIC,iBAAiBnC,EAAIc,UAAW,WASpC,MAT0CW,GAAaS,MAEzD,MAAM,KAEH,SACH,GAAIE,GAAY,aAEVpC,EAAIqC,aAAgBrC,EAAIqC,YAAY5C,UAExCO,EAAIqC,YAAcrC,EAAIe,KAAKkB,IAAI,SAAAC,GAC7B,GAAII,GAAQJ,EAAIK,wBACZC,EAAWC,OAAOC,WACtB,QACEC,MAAOT,EACPU,IAAKN,EAAMM,IAAMJ,EACjBK,OAAQP,EAAMO,OAASL,OAKzBM,EAA0B,WAE5B,GAAK9C,EAAIqC,YAAY5C,OAArB,CAEA,GAAI+C,GAAWC,OAAOC,YAClBK,EAASP,EAAWxC,EAAIa,gBACxBmC,EAAYR,EAAWC,OAAOQ,YAAcjD,EAAIa,eAEpDb,GAAIqC,YAAcrC,EAAIqC,YAAYa,OAAO,SAACC,EAASC,GACjD,GAAIC,GAASF,EAASN,OAASG,GAAaG,EAAQN,OAASE,GAC/CI,EAAQP,IAAMG,GAAUI,EAAQP,IAAMI,CAMpD,OAJIK,IACF5B,EAAa0B,EAAQR,QAGfU,KAIZjB,KACAU,IAEAL,OAAON,iBAAiB,SAAU,WAChCW,MAGFL,OAAON,iBAAiB,SAAU,WAChCC,IACAU","file":"lazy-blur.min.js","sourcesContent":["/* global Image */\nclass LazyBlur {\n  /**\n   * @param  {String}       imgSQuery\n   *         small imgs' className or imgs' DOM array\n   *         default: `.lazy-blur__imgS`\n   *\n   * @param  {Function}     getImgLSrc\n   *         function for getting imgL source url\n   *         default: `function (imgS) { return imgS.getAttribute('data-src'); }`\n   *\n   * @param  {String}       eventType\n   *         event of trigger load images\n   *         'click', 'mouseenter', 'scroll' (default)\n   *\n   * @param  {Number}       scrollThreshold\n   *         distance of scroll threshold (buffer), unit: px\n   *         default: 50\n   *\n   * @param  {String}       imgLClass\n   *         className of imgL\n   *         default: 'lazy-blur__imgL'\n   *\n   * @param  {String}       filterSelector\n   *         css selector for SVG filter\n   *         default: `html.svg *:not(.done) > ${opt.imgSQuery}`\n   *\n   * @param  {Number}       blurSize\n   *         value of svg gaussian blur filter\n   *         default: 20\n   *\n   * @param  {Function}     onLoad\n   *         after imgL loaded\n   *         default: `addClass('done')` for imgS' parent\n   */\n\n  constructor (opt = {}) {\n    opt.imgSQuery = opt.imgSQuery || '.lazy-blur__imgS';\n    opt = Object.assign({\n      imgLClass: 'lazy-blur__imgL',\n      filterSelector: `html.svg *:not(.done) > ${opt.imgSQuery}`,\n      getImgLSrc: (imgS) => { return imgS.getAttribute('data-src'); },\n      onLoad: (imgS) => { imgS.parentElement.className += ' done '; },\n      blurSize: 20,\n      scrollThreshold: 50,\n      eventType: 'scroll'\n    }, opt);\n\n    opt.imgs = [].slice.call(document.querySelectorAll(opt.imgSQuery));\n\n    // skip if no matched img\n    if (!opt.imgs.length) { return; }\n\n    if (typeof opt.onLoad !== 'function') {\n      opt.onLoad = false;\n    }\n\n    // append svg filter\n    let inlineSvg = `\n    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0, 0, 0, 0); border: 0;\">\n      <def>\n        <filter id=\"lazy-blur-filter\">\n          <feGaussianBlur stdDeviation=\"${opt.blurSize}\"></feGaussianBlur>\n        </filter>\n      </def>\n    </svg>\n    <style>\n      ${opt.filterSelector} {\n        -webkit-filter: url(\"#lazy-blur-filter\");\n                filter: url(\"#lazy-blur-filter\");\n      }\n    </style>`;\n\n    document.body.appendChild((() => {\n      let newEl = document.createElement('div');\n      newEl.innerHTML = inlineSvg;\n      return newEl;\n    })());\n\n    let appendSrcImg = (imgS) => {\n      let imgL = new Image();\n      if (opt.onLoad) {\n        imgL.onload = () => {\n          opt.onLoad(imgS);\n        };\n      }\n      imgL.className = opt.imgLClass;\n      imgL.src = opt.getImgLSrc(imgS);\n      imgS.parentNode.insertBefore(imgL, imgS.nextSibling);\n    };\n\n    // events for loading img\n    switch (opt.eventType) {\n      case 'click':\n      case 'mouseenter':\n        opt.imgs.map(img => {\n          img.addEventListener(opt.eventType, () => appendSrcImg(img));\n        });\n        break;\n\n      case 'scroll':\n        let getImgPos = () => {\n          // return if all lazy-blur images loaded\n          if (opt.imgsWithPos && !opt.imgsWithPos.length) { return; }\n\n          opt.imgsWithPos = opt.imgs.map(img => {\n            let _rect = img.getBoundingClientRect();\n            let _offsetY = window.pageYOffset;\n            return {\n              imgEl: img,\n              top: _rect.top + _offsetY,\n              bottom: _rect.bottom + _offsetY\n            };\n          });\n        };\n\n        let detectImgsAreInViewport = () => {\n          // return if all imgs loaded\n          if (!opt.imgsWithPos.length) { return; }\n\n          let _offsetY = window.pageYOffset;\n          let _vpTop = _offsetY - opt.scrollThreshold;\n          let _vpBottom = _offsetY + window.innerHeight + opt.scrollThreshold;\n\n          opt.imgsWithPos = opt.imgsWithPos.filter((imgData, idx) => {\n            let isInVp = (imgData.bottom < _vpBottom && imgData.bottom > _vpTop) ||\n                         (imgData.top > _vpTop && imgData.top < _vpBottom);\n\n            if (isInVp) {\n              appendSrcImg(imgData.imgEl);\n            }\n\n            return !isInVp;\n          });\n        };\n\n        getImgPos();\n        detectImgsAreInViewport();\n\n        window.addEventListener('scroll', () => {\n          detectImgsAreInViewport();\n        });\n\n        window.addEventListener('resize', () => {\n          getImgPos();\n          detectImgsAreInViewport();\n        });\n        break;\n    }\n  }\n}\n"],"sourceRoot":"/source/"}